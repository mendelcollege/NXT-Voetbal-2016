#include "libVerdediger.h"

long t0ballunknown;
long t0ballstraight;

task main();
task Guard();
task TrackLeft();
task TrackRight();

void ReturnToBeginPos()
{
    TextOut(0, LCD_LINE6, "Returning... ");
    PlayTone(TONE_E3, 500);
    if(XPos() > 10) GoLeft();
    if(XPos() < -10) GoRight();
    while(abs(XPos()) > 10)
    {
        UpdateIRValues();
        if(dir != 0)
        {
            PlayTone(TONE_A3, 500);
            return;
        }
        Wait(10);
    }
    GoNowhere();
    
    if(YPos() < -10) GoForward();
    if(YPos() > 10) GoBackward();
    while(abs(YPos()) > 10)
    {
        UpdateIRValues();
        if(dir != 0)
        {
            PlayTone(TONE_A3, 500);
            return;
        }
        Wait(10);
    }
    GoNowhere();
}

void Deflect()
{
    TextOut(0, LCD_LINE6, "Deflecting...");
    PlayTone(TONE_A4, 500);
    GoForward();
    Wait(500);
    GoBackward();
    Wait(500);
    GoNowhere();
    PlayTone(TONE_A3, 500);
}

void CorrectDeflect() //Spreek het uit, het klinkt geweldig, al zeg ik het zelf
{
    TextOut(0, LCD_LINE6, "Deflecting...");
    PlayTone(TONE_A4, 500);
    aim = RELCOMPASSVAL;
    Release(corrector);
    GoForward();
    Wait(500);
    GoBackward();
    Wait(500);
    GoNowhere();
    Acquire(corrector);
    aim = 0;
    PlayTone(TONE_A3, 500);
}



task main()
{
    Init();
    t0ballunknown = 0;
    t0ballstraight = 0;
    ExitTo(Guard);
}

task Guard()
{
    GoNowhere();
    while(true)
    {
        TextOut(0, LCD_LINE6, "Guarding...");
        UpdateIRValues();
        DrawSensorValues();
        if(USBACKVAL < 20)
        {
            GoForward();
        }
        else if(BALLDIRSTRAIGHT)
        {
            GoNowhere();
            t0ballunknown = 0;
            if(t0ballstraight == 0) t0ballstraight = CurrentTick();
            if(CurrentTick() - t0ballstraight > DEFLECTTHRESHOLD)
            {
                //if(dist > BALLDISTANCETHRESHOLD) Deflect();
            }
        }
        else if(BALLDIRUNKNOWN)
        {
            GoNowhere();
            t0ballstraight = 0;
            if(t0ballunknown == 0) t0ballunknown = CurrentTick();
            if(CurrentTick() - t0ballunknown > RETURNTHRESHOLD)
            {
                if(abs(RELCOMPASSVAL) < 5);
                ReturnToBeginPos();
            }
        }
        else if(BALLDIRLEFT)
        {
            t0ballunknown = 0;
            t0ballstraight = 0;
            if(XPos() > -25)
            {
                GoLeft();
            }
            else
            {
                GoNowhere();
                //ExitTo(TrackLeft);
            }
        }
        else if(BALLDIRRIGHT)
        {
            t0ballunknown = 0;
            t0ballstraight = 0;
            if(XPos() < 25)
            {
                GoRight();
            }
            else
            {
                GoNowhere();
                //ExitTo(TrackRight);
            }
        }
        Yield();
    }
}

task TrackLeft()
{
    Acquire(corrector);
    while(true)
    {
        if(BALLDIRSTRAIGHT)
        {
            GoNowhere();
            t0ballunknown = 0;
            if(t0ballstraight == 0) t0ballstraight = CurrentTick();
            if(CurrentTick() - t0ballstraight > DEFLECTTHRESHOLD)
            {
                if(dist > BALLDISTANCETHRESHOLD) CorrectDeflect();
            }
        }
        else if(BALLDIRUNKNOWN)
        {
                GoNowhere();
                t0ballstraight = 0;
                if(t0ballunknown == 0) t0ballunknown = CurrentTick();
                if(CurrentTick() - t0ballunknown > RETURNTHRESHOLD)
                {
                    Release(corrector);
                    while(abs(RELCOMPASSVAL > 5)) Wait(10);
                    ReturnToBeginPos();
                }
        }
        else if(BALLDIRLEFT)
        {
                t0ballunknown = 0;
                t0ballstraight = 0;
                if(RELCOMPASSVAL > -90)
                {
                    TurnLeft(100);
                }
                else GoNowhere();
        }
        else if(BALLDIRRIGHT)
        {
                t0ballunknown = 0;
                t0ballstraight = 0;
                if(RELCOMPASSVAL > -5)
                {
                    Release(corrector);
                    ExitTo(Guard);
                }
                else TurnRight(100);
        }
    }
}

task TrackRight()
{
    Acquire(corrector);
    while(true)
    {
        if(BALLDIRSTRAIGHT)
        {
            GoNowhere();
            t0ballunknown = 0;
            if(t0ballstraight == 0) t0ballstraight = CurrentTick();
            if(CurrentTick() - t0ballstraight > DEFLECTTHRESHOLD)
            {
                //if(dist > BALLDISTANCETHRESHOLD) Deflect();
            }

        }
        else if(BALLDIRUNKNOWN)
        {
                GoNowhere();
                t0ballstraight = 0;
                if(t0ballunknown == 0) t0ballunknown = CurrentTick();
                if(CurrentTick() - t0ballunknown > RETURNTHRESHOLD)
                {
                    Release(corrector);
                    while(abs(RELCOMPASSVAL > 5)) Wait(10);
                    ReturnToBeginPos();
                }
        }
        else if(BALLDIRRIGHT)
        {
                t0ballunknown = 0;
                t0ballstraight = 0;
                if(RELCOMPASSVAL < 90)
                {
                    TurnRight(100);
                }
                else GoNowhere();
        }
        else if(BALLDIRLEFT)
        {
                t0ballunknown = 0;
                t0ballstraight = 0;
                if(RELCOMPASSVAL < 5)
                {
                    Release(corrector);
                    ExitTo(Guard);
                }
                else TurnLeft(100);
        }
    }
}
